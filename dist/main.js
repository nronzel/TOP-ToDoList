(()=>{"use strict";class t{constructor(t){this.title=t,this.tasks=[]}setTitle(t){this.title=t}getTitle(){return this.title}setTasks(t){this.tasks=t}getTasks(){return this.tasks}getTask(t){return this.tasks.find((e=>e.getTitle()===t))}contains(t){return this.tasks.some((e=>e.getTitle()===t))}addTask(t){this.tasks.find((e=>e.getTitle()===t.name))||this.tasks.push(t)}removeTask(t){this.tasks=this.tasks.filter((e=>e.name!==t))}getTasksToday(){return this.tasks.filter((t=>{const e=new Date(t.getDate());return isToday(toDate(e))}))}}class e{constructor(t,e="No Due Date"){this.title=t,this.dueDate=e}setTitle(t){this.title=t}getTitle(){return this.title}setDate(t){this.dueDate=t}getDate(){return this.dueDate}getDateFormatted(){const t=this.dueDate.split("/")[0];return`${this.dueDate.split("/")[1]}/${t}/${this.dueDate.split("/")[2]}`}}class s{constructor(){this.projects=[],this.projects.push(new t("Today")),this.projects.push(new t("Tomorrow"))}setProjects(t){this.projects=t}getProjects(){return this.projects}getProject(t){return this.projects.find((e=>e.getTitle()===t))}contains(t){return this.projects.some((e=>e.getTitle()===t))}addProject(t){this.projects.find((e=>e.name===t.name))?alert("Project already exists"):this.projects.push(t)}removeProject(t){const e=this.projects.find((e=>e.getName()===t));this.projects.splice(this.projects.indexOf(e),1)}}class a{static saveList(t){localStorage.setItem("projList",JSON.stringify(t))}static getList(){const a=Object.assign(new s,JSON.parse(localStorage.getItem("projList")));return a.setProjects(a.getProjects().map((e=>Object.assign(new t,e)))),a.getProjects().forEach((t=>t.setTasks(t.getTasks().map((t=>Object.assign(new e,t)))))),a}static addProject(t){a.getList().addProject(t),a.saveList(projlist)}static removeProject(t){const e=a.getList();e.removeProject(t),a.saveList(e)}static addTask(t,e){const s=a.getList();s.getProject(t).addTask(e),a.saveList(s)}static removeTask(t,e){const s=a.getList();s.getProject(t).removeTask(e),a.saveList(s)}static setTaskDate(t,e,s){const n=a.getList();n.getProject(t).getTask(e).setDate(s),a.saveList(n)}static updateToday(){const t=a.getList();t.updateToday(),a.saveList(t)}}class n{static loadHome(){n.initProjects()}static initUpcoming(){}static initProjects(){a.getList().getProjects().forEach((t=>{"Today"!==t.title&&n.drawProject(t.title)})),n.initAll()}static initAll(){n.initProjectBtnActions(),n.initTaskBtnActions(),n.initDefaultProjectActions()}static initClosePopupBtnActions(){document.querySelectorAll(".close-popup").forEach((t=>t.addEventListener("click",n.closeAllPopups)))}static initDefaultProjectActions(){document.querySelectorAll("#defaultProj").forEach((t=>t.addEventListener("click",n.defaultProjActions))),n.initClosePopupBtnActions()}static initTaskBtnActions(){const t=document.getElementById("newTaskBtn"),e=document.getElementById("newTaskPopup");t.addEventListener("click",n.activateTaskPopup),e.addEventListener("click",n.handleTaskPopup),n.initClosePopupBtnActions()}static initProjectBtnActions(){const t=document.querySelectorAll("#projectBtn"),e=document.getElementById("newProjPopup");document.getElementById("newProjBtn").addEventListener("click",n.activateProjectPopup),t.forEach((t=>t.addEventListener("click",n.projBtnActions))),e.addEventListener("click",n.handleProjPopup),n.initClosePopupBtnActions()}static drawProject(t){document.getElementById("projectList").innerHTML+=`\n    <button id="projectBtn" class="nav-btn">\n            <div class="nav-btn-left">\n              <i class="fa-solid fa-list-check"></i>\n              <span>${t}</span>\n            </div>\n            <div class="nav-btn-right">\n              <i class="fa-solid fa-xmark"></i>\n            </div>\n          </button>\n    `}static drawTask(t,e="No Due Date"){document.querySelector(".task-container").innerHTML+=`\n    <button class="task">\n            <div class="task-left">\n              <i class="fa-regular fa-circle blue-svg"></i>\n              <p class="task-subject">${t}</p>\n            </div>\n            <div class="task-right">\n              <p class="due-date">${e}</p>\n              <i class="fa-solid fa-xmark remove-task-svg"></i>\n            </div>\n          </button>\n    `}static drawTaskContainer(t){const e=document.querySelector(".task-section");e.innerHTML+=`\n    <h1 class="project-title">${t}</h1>\n    <div class="task-container"></div>\n    `,e.innerHTML+='\n    \x3c!-- NEW TASK BUTTON --\x3e\n    <button id="newTaskBtn" class="new-task-btn">\n      <i class="fa-solid fa-circle-plus blue-svg"></i>\n      <span>Add Task</span>\n    </button>\n    \x3c!-- ADD TASK POPUP --\x3e\n    <div id="newTaskPopup" class="add-task-popup">\n      <input class="new-task-input" type="text" placeholder="Enter task name...">\n      <button class="add-btn-popup">\n        <i class="fa-solid fa-check"></i>\n      </button>\n      <button id="closeTaskPopup" class="close-popup">\n        <i class="fa-solid fa-xmark"></i>\n      </button>\n    </div>\n    '}static projBtnActions(t){this.children[0].children[1].textContent,(t.target.classList.contains("fa-xmark")||t.target.parentNode.classList.contains("fa-xmark"))&&console.log("removed"),n.clearAllActive(),this.classList.add("active")}static defaultProjActions(t){this.innerText.trim(),n.clearAllActive(),this.classList.add("active")}static clearAllActive(){document.querySelectorAll(".nav-btn").forEach((t=>t.classList.remove("active")))}static activateProjectPopup(){const t=document.getElementById("newProjPopup"),e=document.getElementById("newProjBtn");t.classList.add("active"),e.style.display="none"}static closeProjectPopup(){const t=document.getElementById("newProjPopup"),e=document.getElementById("newProjBtn");t.classList.remove("active"),e.style.display="flex"}static clearNewProjInput(){document.querySelector(".new-proj-input").value=""}static handleProjPopup(t){if((t.target.classList.contains("fa-xmark")||t.target.parentNode.classList.contains("fa-xmark"))&&n.closeProjectPopup(),t.target.classList.contains("fa-check")||t.target.parentNode.classList.contains("fa-check")){const t=document.querySelector(".new-proj-input");""==t.value&&alert("Project name cannot be blank!"),n.drawProject(t.value),n.closeProjectPopup(),n.initProjectBtnActions()}n.clearNewProjInput()}static activateTaskPopup(){const t=document.getElementById("newTaskPopup"),e=document.getElementById("newTaskBtn");t.classList.add("active"),e.style.display="none"}static closeTaskPopup(){const t=document.getElementById("newTaskPopup"),e=document.getElementById("newTaskBtn");t.classList.remove("active"),e.style.display="flex"}static closeAllPopups(){n.closeProjectPopup(),n.closeTaskPopup()}static handleTaskPopup(t){if((t.target.classList.contains("fa-xmark")||t.target.parentNode.classList.contains("fa-xmark"))&&n.closeTaskPopup(),t.target.classList.contains("fa-check")||t.target.parentNode.classList.contains("fa-check")){const t=document.querySelector(".new-task-input");""==t.value&&alert("Task name cannot be blank!"),console.log(t.value),n.drawTask(t.value),n.closeTaskPopup(),n.initTaskBtnActions()}n.clearNewTaskInput()}static clearNewTaskInput(){document.querySelector(".new-task-input").value=""}}new s,n.loadHome()})();